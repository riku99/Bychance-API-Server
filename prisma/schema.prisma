generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(uuid())
  lineId               String                @unique
  name                 String
  avatar               String?
  introduce            String?
  statusMessage        String?
  display              Boolean               @default(false)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  accessToken          String                @unique
  lat                  String?
  lng                  String?
  backGroundItem       String?
  backGroundItemType BackGroundItemTypeRole?
  instagram            String?
  twitter              String?
  youtube              String?
  tiktok               String?
  videoEditDescription Boolean                @default(false)
  talkRoomMessageReceipt Boolean              @default(true)
  login                Boolean                @default(true)
  showReceiveMessage   Boolean                @default(true)
  inPrivateZone        Boolean                @default(false)
  geohash              String? // 6桁のgeohashのハッシュ。Userの取得などで使用
  geohash7             String? // 7桁のgeohashのハッシュ。Recommendationの取得などで使用
  intro                Boolean                @default(false)
  flashes              Flash[]
  posts                Post[]
  readTalkRoomMessages ReadTalkRoomMessage[]
  recipientTalkRooms   TalkRoom[]            @relation("recipient")
  senderTalkRooms      TalkRoom[]            @relation("sender")
  talkRoomMessages     TalkRoomMessage[]
  viewedFlashes        ViewedFlash[]
  deviceToken DeviceToken[]
  flashStamps FlashStamp[]
  privateZone PrivateZone[]
  privateTime PrivateTime[]
  hideRecommendation UserHideRecommendation[]
  blocks Block[] @relation("blockBy") // 自分がブロックした側
  blocked Block[] @relation("blockTo") // ブロックされた側

  @@index([display, login, inPrivateZone, geohash, lat, lng])
  @@index([lineId])
  @@index([accessToken])
}

model Post {
  id        Int      @id @default(autoincrement())
  text      String?
  url       String
  createdAt DateTime @default(now())
  userId    String
  sourceType PostSourceTypeRole @default(image)
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Flash {
  id         Int                 @id @default(autoincrement())
  source     String
  createdAt  DateTime            @default(now())
  sourceType FlashSourceTypeRole
  userId     String
  user       User                @relation(fields: [userId], references: [id])
  viewed     ViewedFlash[]       @relation("allViewed")
  specificUserViewed ViewedFlash[]  @relation("specificUserViewed")
  stamps FlashStamp[]

  @@index([userId])
}

model Nonce {
  id        Int      @id @default(autoincrement())
  nonce     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TalkRoom {
  id                   Int                   @id @default(autoincrement())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  senderId             String
  recipientId          String
  recipient            User                  @relation("recipient", fields: [recipientId], references: [id])
  sender               User                  @relation("sender", fields: [senderId], references: [id])
  readTalkRoomMessages ReadTalkRoomMessage[]
  lastMessage          TalkRoomMessage[]    @relation("lastMessage")
  messages             TalkRoomMessage[]   @relation("Messages")
  unreadMessages       TalkRoomMessage[]   @relation("UnreadMessages")

  @@unique([senderId, recipientId], name: "senderId_recipientId_unique")
  @@index([senderId, recipientId], name: "senderId_recipientId_index")
  @@index([recipientId])
}

model TalkRoomMessage {
  id                   Int                   @id @default(autoincrement())
  text                 String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  userId               String
  roomId               Int
  receipt              Boolean               @default(true)
  room                 TalkRoom              @relation("Messages", fields: [roomId], references: [id])
  unread               TalkRoom              @relation("UnreadMessages", fields: [roomId], references: [id])
  last                 TalkRoom              @relation("lastMessage", fields: [roomId], references: [id])
  user                 User                  @relation(fields: [userId], references: [id])
  readTalkRoomMessages ReadTalkRoomMessage[]

  @@index([userId, roomId])
  @@index([userId, receipt])
  @@index([roomId])
}

model ViewedFlash {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  flashId   Int
  flash     Flash    @relation("allViewed", fields: [flashId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  specificUserViewed  Flash @relation("specificUserViewed", fields: [flashId], references: [id])

  @@unique([userId, flashId], name: "userId_flashId_unique") // viewedFlash.userId_flashId_uniqueのように.つけて定義するとエラーになる
  @@index([flashId])
  @@index([userId, flashId])
}

model ReadTalkRoomMessage {
  id        Int             @id @default(autoincrement())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  userId    String
  messageId Int
  roomId    Int
  message   TalkRoomMessage @relation(fields: [messageId], references: [id])
  room      TalkRoom        @relation(fields: [roomId], references: [id])
  user      User            @relation(fields: [userId], references: [id])

  @@unique([userId, messageId, roomId], name: "userId_messageId_roomId_unique")
  @@index([userId, messageId, roomId])
  @@index([messageId])
  @@index([roomId])
}

// model DeleteTalkRoom {
//   id Int @id @default(autoincrement())
//   createdAt DateTime        @default(now())
//   updatedAt DateTime        @updatedAt
//   userId    String
//   talkRoomId Int
//   user User @relation(fields: [userId], references: [id])
//   talkRoom TalkRoom @relation(fields: [talkRoomId], references: [id])
//   @@index([userId, talkRoomId])
//   @@unique([userId, talkRoomId])
// }

// https://rnfirebase.io/messaging/server-integration
// A user can have more than one token (for example using 2 devices) so it's important to ensure that we store all tokens in the database.
// 上記URLにこういうこと書いてあり、複数のトークンを持つ可能性があることからUserの属性として持たせるのではなく、別のテーブルとして管理
model DeviceToken {
  id Int @id @default(autoincrement())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  token String
  userId    String
  user User @relation(fields: [userId], references: [id])
  @@index([token])
  @@unique([token])
}

model FlashStamp {
  id Int @id @default(autoincrement())
  createdAt DateTime        @default(now())
  value FlashStampValue
  userId String
  flashId Int
  user User @relation(fields: [userId], references: [id])
  flash Flash @relation(fields: [flashId], references: [id])

  @@index([userId, flashId])
  @@unique([userId, flashId, value]) // ユーザーに同じスタンプデータをを複数回登録することをできなくする
}

model PrivateZone {
  id Int @id @default(autoincrement())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  lat String
  lng String
  address String
  userId String
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PrivateTime {
  id Int @id @default(autoincrement())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  startHours Int
  startMinutes Int
  endHours Int
  endMinutes Int
  userId String
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

// おすすめ機能が使えるクライアントのこと。
model RecommendationClient {
  id String @id @default(uuid())
  uid String @unique // firebase内のid。認証認可で使用
  name String
  image String?
  lat Float?
  lng Float?
  geohash String? // 7桁のgeohashのハッシュ
  address String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  enablePushNotification Boolean             @default(false)
  instagram String?
  twitter String?
  url String?
  admin Boolean @default(false) // 管理ユーザーのみtrue
  showedPostModal Boolean @default(false)
  deleted Boolean @default(false) // アカウント削除を実行した場合はtrue
  recommendations Recommendation[]
  readNotifications RecommendationClientReadNotification[]

  @@index([uid])
  @@index([geohash])
}

model Recommendation{
  id Int @id @default(autoincrement())
  title String
  text String
  coupon Boolean
  endTime DateTime?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  display Boolean @default(true)
  clientId String
  client RecommendationClient @relation(fields: [clientId], references: [id])
  hiddenRecommendations UserHideRecommendation[]
  images RecommendationImage[]

  @@index([clientId])
}

model RecommendationImage {
  id Int @id @default(autoincrement())
  createdAt            DateTime              @default(now())
  url String
  recommendationId Int
  recommendation Recommendation @relation(fields: [recommendationId], references: [id])

  @@index([recommendationId])
}

// ユーザーが非表示にしたレコメンデーションを記録。レコメンデーションクライアントが投稿を非表示にしたものとは別
model UserHideRecommendation {
  id Int @id @default(autoincrement())
  createdAt            DateTime              @default(now())
  userId String
  recommendationId Int
  user User @relation(fields: [userId], references: [id])
  recommendation Recommendation @relation(fields: [recommendationId], references: [id])

  @@index([userId])
  @@index([recommendationId])
}

// RecommendationClientは誰でも作成できるわけではない。作成に必要なトークン
model ClientSignupToken {
  id Int @id @default(autoincrement())
  createdAt            DateTime              @default(now())
  token String @unique

  @@index([token])
}

model RecommendationClientNotification {
  id Int @id @default(autoincrement())
  createdAt            DateTime              @default(now())
  title String
  text String
  alreadyRead RecommendationClientReadNotification[]
}

model RecommendationClientReadNotification {
  id Int @id @default(autoincrement())
  createdAt            DateTime              @default(now())
  clientId String
  notificationId Int
  client RecommendationClient @relation(fields: [clientId], references: [id])
  notification RecommendationClientNotification @relation(fields: [notificationId], references: [id])

  @@index([clientId])
  @@unique([clientId, notificationId])
}

model Block {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  blockBy String // ブロックした方
  blockTo String // ブロックされた方
  blocker User @relation("blockBy", fields: [blockBy], references: [id])
  blocked User @relation("blockTo", fields: [blockTo], references: [id])

  @@unique([blockBy, blockTo])
}


enum FlashSourceTypeRole {
  image
  video
}

enum BackGroundItemTypeRole {
  image
  video
}

enum PostSourceTypeRole {
  image
  video
}

enum FlashStampValue {
  thumbsUp
  yusyo
  yoi
  itibann
  seikai
}
